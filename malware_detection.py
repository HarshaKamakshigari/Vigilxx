import os
import hashlib
import requests
import shutil
import sys
import datetime

API_KEY = "53033cd824a531808e4acbe2171fbc586dbe4af196b8fc640a4da28fa0b4e60e"  # VirusTotal API key
OXT_API_KEY = "ebcaf45d7a4cf558c51a334932aa65da526d1b8ced85b8ec52597954214322a8"  # Replace with your OXT API key
QUARANTINE_FOLDER = "quarantine"
BASE_PATH = r"C:\Users\siras\OneDrive\Desktop"  # Path to the folder you want to scan
LOG_FILE = "scan_log.txt"  # Log file to save the logs

class MalwareAnalyzer:
    def __init__(self):  # Corrected method name
        self.vt_url = "https://www.virustotal.com/api/v3/"
        self.vt_headers = {"accept": "application/json", "X-Apikey": API_KEY}
        self.oxt_url = "https://oxt_api_endpoint/"  # Replace with actual OXT API URL
        self.oxt_headers = {"Authorization": f"Bearer {OXT_API_KEY}"}
        self.cve_url = "https://services.nvd.nist.gov/rest/json/cve/1.0/"  # No API key required for NVD
        self.cve_headers = {}
    
    def log(self, message):
        """Log messages to a file."""
        with open(LOG_FILE, "a") as log_file:
            log_file.write(f"{datetime.datetime.now()}: {message}\n")
    
    def scan_file(self, file_path):
        """Scan the file using VirusTotal, OXT, and CVE APIs."""
        file_hash = self.get_file_hash(file_path)
        log_message = f"Scanning file: {file_path} with hash {file_hash}"
        print(log_message)
        self.log(log_message)
        
        # Query VirusTotal
        self.query_virustotal(file_hash)
        
        # Query OXT (if implemented correctly)
        self.query_oxt(file_hash)
        
        # Query CVE (if implemented correctly)
        self.query_cve(file_hash)
        
        # Risk classification based on VirusTotal's results
        self.classify_risk(file_hash)
        
    def get_file_hash(self, file_path):
        """Generate the SHA-256 hash of a file."""
        sha256_hash = hashlib.sha256()
        with open(file_path, "rb") as f:
            # Read the file in chunks and update the hash
            for byte_block in iter(lambda: f.read(4096), b""):
                sha256_hash.update(byte_block)
        return sha256_hash.hexdigest()
    
    def query_virustotal(self, file_hash):
        """Query VirusTotal API with the file hash."""
        url = self.vt_url + f"files/{file_hash}"
        try:
            response = requests.get(url, headers=self.vt_headers)
            if response.status_code == 200:
                data = response.json()
                malicious = data['data']['attributes']['last_analysis_stats']['malicious']
                log_message = f"VirusTotal detection count: {malicious}"
                print(log_message)
                self.log(log_message)
            else:
                log_message = f"Error querying VirusTotal API: {response.status_code}"
                print(log_message)
                self.log(log_message)
        except Exception as e:
            log_message = f"Error querying VirusTotal API: {e}"
            print(log_message)
            self.log(log_message)
    
    def query_oxt(self, file_hash):
        """Query OXT API with the file hash (requires actual OXT API endpoint)."""
        url = f"{self.oxt_url}/{file_hash}"  # Replace with actual endpoint and logic
        try:
            response = requests.get(url, headers=self.oxt_headers)
            if response.status_code == 200:
                data = response.json()
                log_message = f"OXT result: {data}"
                print(log_message)
                self.log(log_message)
            else:
                log_message = f"Error querying OXT API: {response.status_code}"
                print(log_message)
                self.log(log_message)
        except Exception as e:
            log_message = f"Error querying OXT API: {e}"
            print(log_message)
            self.log(log_message)
    
    def query_cve(self, file_hash):
        """Query CVE API for vulnerabilities related to the file hash."""
        cve_id = self.hash_to_cve(file_hash)
        if not cve_id:
            log_message = f"No CVE ID found for hash {file_hash}"
            print(log_message)
            self.log(log_message)
            return
        
        url = f"{self.cve_url}{cve_id}"
        try:
            response = requests.get(url, headers=self.cve_headers)
            if response.status_code == 200:
                data = response.json()
                log_message = f"CVE API result: {data}"
                print(log_message)
                self.log(log_message)
            else:
                log_message = f"Error querying CVE API: {response.status_code}"
                print(log_message)
                self.log(log_message)
        except Exception as e:
            log_message = f"Error querying CVE API: {e}"
            print(log_message)
            self.log(log_message)
    
    def hash_to_cve(self, file_hash):
        """Map file hash to a CVE ID."""
        # This function should be implemented to map a file hash to a CVE ID.
        # It could query VirusTotal or another service to find relevant CVE.
        # Here, it returns None as a placeholder.
        return None
    
    def classify_risk(self, file_hash):
        """Classify the risk based on VirusTotal detections."""
        url = self.vt_url + f"files/{file_hash}"
        try:
            response = requests.get(url, headers=self.vt_headers)
            if response.status_code == 200:
                data = response.json()
                malicious = data['data']['attributes']['last_analysis_stats']['malicious']
                if malicious == 0:
                    risk_level = "Low"
                elif malicious <= 3:
                    risk_level = "Medium"
                elif malicious <= 6:
                    risk_level = "High"
                else:
                    risk_level = "Very High"
                log_message = f"Risk Level for {file_hash}: {risk_level}"
                print(log_message)
                self.log(log_message)
                
                # Isolate high-risk files
                if risk_level in ["High", "Very High"]:
                    self.isolate_file(file_hash)
            else:
                log_message = f"Error querying VirusTotal API: {response.status_code}"
                print(log_message)
                self.log(log_message)
        except Exception as e:
            log_message = f"Error querying VirusTotal API: {e}"
            print(log_message)
            self.log(log_message)
    
    def isolate_file(self, file_hash):
        """Move high/very high risk files to quarantine."""
        file_path = os.path.join(BASE_PATH, file_hash)  # Assuming hash maps directly to the file
        if os.path.exists(file_path):
            quarantine_path = os.path.join(QUARANTINE_FOLDER, file_hash)
            if not os.path.exists(QUARANTINE_FOLDER):
                os.makedirs(QUARANTINE_FOLDER)
            shutil.move(file_path, quarantine_path)
            log_message = f"File {file_path} moved to quarantine folder."
            print(log_message)
            self.log(log_message)
        else:
            log_message = f"File with hash {file_hash} not found."
            print(log_message)
            self.log(log_message)
    

def scan_directory(directory_path):
    """Scan all files in a given directory."""
    analyzer = MalwareAnalyzer()
    for dirpath, dirnames, filenames in os.walk(directory_path):
        for filename in filenames:
            file_path = os.path.join(dirpath, filename)
            analyzer.scan_file(file_path)


if __name__ == "__main__":  # Corrected the main entry point
    if len(sys.argv) < 2:
        print("Usage: python malware_analyzer.py <directory_to_scan>")
        sys.exit(1)

    if not os.path.exists(QUARANTINE_FOLDER):
        os.makedirs(QUARANTINE_FOLDER)

    directory_to_scan = sys.argv[1]
    scan_directory(directory_to_scan)
